let len = try Option<u32> {
    let a = readline()!
    a.length()
}
let len = try! Option<u32> {
let a = readline()!
a.length()
}


try _ {

}

try () {

}
catch {

}

try Option<T> {

}

trait Biased {
    micro biased(self): bool;
}

extend<T> Option<T>: Biased {
    micro biased(self) = @matches(self, Some(_))
}

extend<T> Result<T>: Biased {
    micro biased(self) = @matches(self, Success(_))
}

match a {
    [ ]:
        fallthrough

}

|a| {}