namespace package.category;



trait Monad: Functor {
    pure<A>(a: A) -> Self<A>;
    bind<A, B>(m: Self<A>, f: A -> Self<B>) -> Self<B>;
    join<A>(m: Self<Self<A>>) -> Self<A> {
        bind(m, identity)
    }
}
extends Option: Monad {
    pure<A>(a: A) -> Self<A> {
        Some(v)
    }
}
trait Comonad {
    type Self: * => *;
    /// dual of Monad::unit
    extract(m: Self<A>) -> A;
    /// dual of Monad::join
    duplicate(m: Self<A>) -> Self<Self<A>>;
}