namespace package.array;

@native
@derive(Copy, Clone, Display)
class NDArray<I, T> {
    buffer: ArrayT,
    index: I,
}

type Matrix<T> = NDArray<T, (2, )>


micro test() {
    NDArray([[1, 2], [3, 4]]);
    x = NDArray([[1, 2], [3, 4], [5, 6]]);
    y = x[[0, 1, 2], [0, 1, 0]];
    print (y);
}

extends Tensor<T, D> {
    view() -> Tensor<T>
}

ðŸ—¨ A view of raw tensor
ðŸ—¨ Edit the element will change the value in original tensor
#native
class ArrayND<T, D> {
    share: Tensor<T, D>,
}

type Array4D<T, N, C, H, W> = ArrayND<T, (N, C, H, W)>
type Array3D<T, C, H, W> = ArrayND<T, (C, H, W)>
type Array2D<T, H, W> = ArrayND<T, (H, W)>


class Matrix<T, H, W>: Array2D<T, H, W> {

}

class Vector<T, L> {

}

class Vector {

}