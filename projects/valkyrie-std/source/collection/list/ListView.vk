namespace package.collections.list;

@document.include('ListView.md')
structure ListView<T> {
    list: List<T>,
    span: Span<usize>,

    constructor(list: List<T>, span: Span<usize>?) {
        let head = span?.head ?? 0;
        let tail = span?.tail ?? list.length;
        self.list = list
        self.span = Span(min, max)
    }
}

extends List<T>: IntoIterator {
    type Item = T
    type Iterator = ListView<T>

    into_iterator(self) -> Self::Iterator {
        ListView(self)
    }
}

extends List<T> {
    #predicate
    is_empty(self) {

    }
    view(self, span: Span<usize>?): ListView<T> {
        ListView(self, span)
    }
    head(self): T | T? {
        if self.is_empty {
            null
        }
        else {
            self.get_index(1)
        }
    }
    head_split(self): (T | T?, ListView<T>) {
        self.get_index(1)
    }
    tail(self): T | T? {
        if self.is_empty {
            null
        }
        else {
            self.get_index(self.length)
        }
    }
    tail_split(self): (T | T?, ListView<T>) {
        self.get_index(1)
    }
    most(){
        self.get_index([2:-1])
    }
    rest(){
        self.get_index([1:-1])
    }
}
