namespace package.collections.list;


#native
@document.include('List.md')
class List<T> {
    handler: Resource
    _type: PhantomData<T>
}

#native
private structure ListEntry {
    meta: MetaType!
    data: DataCell!
}

extends List<T> {
    constructor(capacity: usize = 0) {
        Self {

        }
    }
}


extends List<T> {
    get(self, index: isize): T? {
        self.get_entry(index)?.data?.cast::<T>()
    }
    set(mut self, index: isize, value: T): T? {
        let old = self.get_entry(index)?.data;
        old?.do_swap(value)
    }


    insert(mut self, last: isize, value: T): Unit {

    }
    remove(mut self, index: isize, value: T): Unit {

    }

    append(self, value: T) {
        self.insert(-1)
    }
}


