class Asynchronous {

}
trait Awaitable {
    type Awaiter;
    ðŸ—¨ Asynchronous execution, contagious async, unless returns `!` or `()`
    await(self): Continuation< Self::Awaiter >;
    ðŸ—¨ Execute synchronously and wait for the task to be completed.
    block(self): Continuation< Self::Awaiter >;
}


#[native, token.kind(keyword)]
macro async(block: AnyNode) {

}


module::async;
package::async;


micro async_read(path: Path) -> T / Asynchronous {
    async {
        File::read(path)
    }
}

match async_read(file) {
    when Asynchronous:
        G
}