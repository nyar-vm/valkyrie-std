namespace package.number;

#native
enumerate Sign(i8) {
    NoSign = 0
    Positive = 1
    Negative = -1,
}

#native
structure Integer {
    sign: Sign = Sign::NoSign;
    natural: Natural = default;
}

extends Integer {
    /// Create a new Integer from u8
    constructor(n: u8): Self {
        new_u64(n as u64)
    }
    constructor(n: u16): Self {
        new_u64(n as u64)
    }
    constructor(n: u32): Self {
        new_u64(n as u64)
    }
    constructor(n: u64): Self {
        new_u64(n as u64)
    }
    constructor(n: Natural): Self {
        new_u64(n as u64)
    }

    constructor(n: i8): Self {
        new_i64(n as i64)
    }
    constructor(n: i16): Self {
        new_i64(n as i64)
    }
    constructor(n: i32): Self {
        new_i64(n as i64)
    }
    constructor(n: i64): Self {
        new_i64(n)
    }
}

extends Integer {

}

extends Integer {
    infix `+`(self, rhs: u8): Integer {
        Self::add_u64(rhs as i64)
    }
    infix `+`(self, rhs: u16): Integer {
        Self::add_u64(rhs as i64)
    }
    infix `+`(self, rhs: u32): Integer {
        Self::add_u64(rhs as i64)
    }
    infix `+`(self, rhs: u64): Integer {
        Self::add_u64(rhs)
    }
    infix `+`(self, rhs: Natural): Integer {
        Self::add_nat(rhs)
    }

    infix `+`(self, rhs: i8): Integer {
        Self::add_i64(rhs as i64)
    }
    infix `+`(self, rhs: i16): Integer {
        Self::add_i64(rhs as i64)
    }
    infix `+`(self, rhs: i32): Integer {
        Self::add_i64(rhs as i64)
    }
    infix `+`(self, rhs: i64): Integer {
        Self::add_i64(rhs)
    }
    infix `+`(self, rhs: Self): Integer {
        Self::add_int(rhs)
    }

    prefix `-`(self): Integer {
        Self::neg(self)
    }

    infix `-`(self, rhs: i8): Integer {
        Self::sub_i64(self)
    }
    infix `-`(self, rhs: i16): Integer {
        #ffi("vit/number/integer/add")(self, other)
    }
    infix `-`(self, rhs: i32): Integer {
        @ffi("vit/number/integer/add")(self, other)
    }
    infix `-`(self, rhs: i64): Integer {
        @ffi("vit/number/integer/add")(self, other)
    }
    infix `-`(self, rhs: Integer): Integer {
        @ffi("vit/number/integer/add")(self, other)
    }
}

#[private, native]
extends Natural {
    #ffi("vit/number/integer/add")
    new_i64(n: i64): Self;
    #ffi("vit/number/integer/add")
    new_u64(n: u64): Self;
    #ffi("vit/number/integer/add")
    new_nat(n: Natural): Self;
    #ffi("vit/number/integer/add")
    neg_this(self): Self
    #ffi("vit/number/integer/add")
    add_u64(self, n: u64): Self;
    #ffi("vit/number/integer/add")
    add_i64(self, n: i64): Self;
    #ffi("vit/number/integer/add")
    add_nat(self, n: Natural): Self;
    #ffi("vit/number/integer/add")
    add_int(self, n: Self): Self;
    #ffi("vit/number/integer/add")
    add_u64_inplace(mut self, n: u64);
    #ffi("vit/number/integer/add")
    add_i64_inplace(mut self, n: i64);
    #ffi("vit/number/integer/add")
    add_nat_inplace(mut self, n: Natural);
    #ffi("vit/number/integer/add")
    add_int_inplace(mut self, n: Self);
}
