namespace package.category;

variant Option<T> {
    Some {
        value: T,
    },
    None,
}

extends Option: Functor {
    map<A, B>(self: Self<A>, f: A -> B): Self<B> {
        match self {
            case Some(v): Some(f(v))
            case None:    None
        }
    }
}
extends Option {
    /// # Examples
    /// ```
    ///
    /// ```
    def is_some(self) {
        @matches(self, Some(_))
    }
    def is_none() {
        @matches(self, None)
    }
}



extends Vector2D {
    constructor() {
        for item in iterable {
            block
        }
        @type_of(A)
        return object Self {

        }
    }
}

