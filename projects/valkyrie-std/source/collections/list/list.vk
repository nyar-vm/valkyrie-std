

@native
@document.include('readme.md')
class List⦓T = Any⦔ {
    #? # Examples
    #?
    #? ```
    #? let list = List⦓int⦔::new(3);
    #? ```
    constructor(capacity: usize) { }
}

@native
imply List⦓T⦔ {
    #? # Examples
    #?
    #? ```
    #? let a = new List⦓int⦔(3) {1, 2, 3};
    #? let b = new List⦓int⦔(3) {4, 5, 6};
    #? @debug.assert_equal(a ++ b, [1, 2, 3, 4, 5, 6]);
    operator `++`(self, rhs: Self) { }
    operator `++=`(mut self, rhs: Self) { }
    #? # Examples
    #?
    #? ```
    #? let list = List⦓int⦔::new(3);
    #? list.append(1, 2, 3);
    #? list ++= [4, 5, 6];
    #? @debug.assert_equal(list, [1, 2, 3, 4, 5, 6]);
    #? ```
    append(mut self, **terms: List⦓T⦔) { }






    prepend(mut self, **terms: List⦓T⦔) { }
}

