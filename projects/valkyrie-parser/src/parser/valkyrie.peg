@export
VkParser = {statements:VkStatements} $;

VkStatements =
	@:NamespaceDeclare |
	@:DefStatement |
	@:LetStatement |
	@:LoopStatement |
	@:WhileStatement |
	@:ControlFlowNode |
	@:ExpressionNode |
	@:Semicolon
;

#=======================================================================================================================
NamespaceDeclare = "namespace" namespace:NamespaceDot;


#=======================================================================================================================
LoopStatement = "loop" body:BlockNode;

WhileStatement = "while" condition:ExpressionNode body:BlockNode;
#=======================================================================================================================
DefStatement = "def" namespace:NamespaceNode [parameters:DefineArguments] body:BlockNode;

DefineArguments = '(' ')' | '(' args:DefineArgument [',' args:DefineArgument] ')';
DefineArgument = name:IdentifierNode [':' type:TypeNode] ['=' value:ExpressionNode ];

BlockNode = '{' {statements:VkStatements} '}';


#=======================================================================================================================
LetStatement = "let" {modifiers:Modifier} pattern:PatternNode [':' type:TypeNode] ['=' value:ExpressionNode ];
PatternNode = name:IdentifierNode;

TypeNode = id:IdentifierNode;
#=======================================================================================================================
ControlFlowNode =
	  "break"
	| "continue"
	| "return" [value:ExpressionNode]
	| "raise" value:ExpressionNode
	| "yield" value:ExpressionNode
	| "yield" "from" value:ExpressionNode
	| "yield" "break"
	;


ExpressionNode = expr:*ExprNode {infix:ExprInfix};

ExprInfix = infix:InfixOperators expr:ExprNode;

ExprNode = {prefix:Prefix} term:TermNode {suffix:Suffix};

TermNode = '(' @:ExpressionNode ')' | @:StringNode | @:IdentifierNode | @:NumberNode;

@string
@position
Prefix = '!' | '+' | '-' | '⅟';

@string
@position
InfixOperators =
	'is' ['not'] | ['not'] 'in' |
	'++=' | '++' | '+=' | '+' |
	'--=' | '--' | '-=' | '-' |
	'*' | '*=' | '/' | '/=' |
	'^=' | '^' | '<<' | '<<=' | '>>' | '>>=' |
	'==' | '!=' | '>=' | '<=' | '>' | '<' | '='
	;

@string
@position
Suffix = '?' | '!';


ValueNode =
	@:NumberNode |
	@:StringNode
;
#=======================================================================================================================
LambdaStatement = "lambda" [parameters:DefineArguments];


#=======================================================================================================================
DotCall = '.' name:IdentifierNode [args:CallArguments];
CallArguments = '(' ')' | '(' args:CallArgument [',' args:CallArgument] ')';
CallArgument = name:IdentifierNode ['=' value:ExpressionNode ];
#=======================================================================================================================
KeyValueNode = key:KeyNode ':' value:ValueNode;

@position
KeyNode =
	@:IdentifierNode |
	@:StringNode
;

@position
StringNode = [hint:IdentifierNode] '\"' '\"';

@position
@no_skip_ws
NumberNode = num:Num [hint:IdentifierNode];

@string
@position
@no_skip_ws
Num = {'0'..'9'}+ [Dot {'0'..'9'}+];

@position
NamespaceNode = path:IdentifierNode {NamespaceSplit path:IdentifierNode};

@position
NamespaceDot = path:IdentifierNode {(NamespaceSplit|Dot) path:IdentifierNode};

NamespaceSplit = '::';

Modifier = id:IdentifierNode !('('|':'|'.'|'=');

@string
@position
@no_skip_ws
IdentifierNode = (XID_START | '_') {XID_CONTINUE};

@string
@position
SpecialNode = 'null' | 'default' | 'true' | 'false';


@char
@check(unicode_ident::is_xid_start)
XID_START = char;

@char
@check(unicode_ident::is_xid_continue)
XID_CONTINUE = char;

@char
Dot = '.' | '。';


Semicolon = ';';

@char
Split = ';' | ',' | '，';